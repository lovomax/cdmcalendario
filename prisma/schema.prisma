generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Appointments {
  id             Int           @id @default(autoincrement()) 
  professionalId String 
  userId         String 
  date           DateTime      @db.Timestamptz(6) 
  professionals  Professionals @relation(fields: [professionalId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users          Users         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([professionalId])
  @@index([userId])

  @@map("appointments")
}

model Fields {
  id                 Int                  @id @default(autoincrement()) 
  name               String 
  professionalFields ProfessionalFields[]
  @@map("fields")
}

model Forecasts {
  id                    Int                     @id @default(autoincrement()) 
  name                  String 
  professionalForecasts ProfessionalForecasts[]
  @@map("forecasts")
}

model Interventions {
  id                        Int                         @id @default(autoincrement()) 
  name                      String 
  professionalInterventions ProfessionalInterventions[]
  @@map("interventions")
}

model Modalities {
  id                     Int                      @id @default(autoincrement()) 
  name                   String 
  professionalModalities ProfessionalModalities[]
  @@map("modalities")
}

model PaymentMethods {
  id                         Int                          @id @default(autoincrement()) 
  name                       String 
  professionalPaymentMethods ProfessionalPaymentMethods[]
  @@map("payment_methods")
}

model PhoneNumbers {
  id           Int    @id @default(autoincrement()) 
  userId       String 
  number       String 
  roleOfNumber Role   @default(USER)
  users        Users  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId])
  @@map("phone_numbers")
}

model ProfessionalFields {
  id             Int           @id @default(autoincrement()) 
  professionalId String 
  specializedId        Int 
  fields         Fields        @relation(fields: [specializedId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  professionals  Professionals @relation(fields: [professionalId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([specializedId])
  @@index([professionalId])
  @@map("professional_fields")
}

model ProfessionalForecasts {
  id             Int           @id @default(autoincrement()) 
  professionalId String 
  specializedId     Int 
  forecasts      Forecasts     @relation(fields: [specializedId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  professionals  Professionals @relation(fields: [professionalId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([specializedId])
  @@index([professionalId])
  @@map("professional_forecasts")
}

model ProfessionalInterventions {
  id             Int           @id @default(autoincrement()) 
  professionalId String 
  specializedId Int 
  interventions  Interventions @relation(fields: [specializedId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  professionals  Professionals @relation(fields: [professionalId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([specializedId])
  @@index([professionalId])
  @@map("professional_interventions")
}

model ProfessionalModalities {
  id             Int           @id @default(autoincrement()) 
  professionalId String 
  specializedId     Int 
  modalities     Modalities    @relation(fields: [specializedId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  professionals  Professionals @relation(fields: [professionalId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([specializedId])
  @@index([professionalId])
  @@map("professional_modalities")
}

model ProfessionalPaymentMethods {
  id              Int            @id @default(autoincrement()) 
  professionalId  String 
  specializedId Int 
  paymentMethods  PaymentMethods @relation(fields: [specializedId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  professionals   Professionals  @relation(fields: [professionalId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([specializedId])
  @@index([professionalId])
  @@map("professional_payment_methods")
}

model ProfessionalSpecialties {
  id             Int           @id @default(autoincrement()) 
  professionalId String 
  specializedId    Int 
  professionals  Professionals @relation(fields: [professionalId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  specialties    Specialties   @relation(fields: [specializedId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([professionalId])
  @@index([specializedId])
  @@map("professional_specialties")
}

model Professionals {
  id                         String                       @id @default(uuid())
  userId                     String                       @unique
  appointments               Appointments[]
  professionalFields         ProfessionalFields[]
  professionalForecasts      ProfessionalForecasts[]
  professionalInterventions  ProfessionalInterventions[]
  professionalModalities     ProfessionalModalities[]
  professionalPaymentMethods ProfessionalPaymentMethods[]
  professionalSpecialties    ProfessionalSpecialties[]
  users                      Users                        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  restDays                   RestDays[]
  schedules                  Schedules[]
  specialDays                SpecialDays[]
  studies                    Studies[]

  @@map("professionals")
}

model RestDays {
  id             Int           @id @default(autoincrement()) 
  professionalId String 
  dayOfWeek      Int            
  professionals  Professionals @relation(fields: [professionalId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([professionalId])
  @@map("rest_days")
}

model Schedules {
  id             Int           @id @default(autoincrement()) 
  professionalId String 
  scheduleStart  DateTime      @db.Timestamptz(6) 
  scheduleEnd    DateTime      @db.Timestamptz(6) 
  restStart      DateTime      @db.Timestamptz(6) 
  restEnd        DateTime      @db.Timestamptz(6) 
  professionals  Professionals @relation(fields: [professionalId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([professionalId])
  @@map("schedules")
}

model SpecialDays {
  id               Int               @id @default(autoincrement()) 
  professionalId   String 
  date             DateTime          @unique @db.Timestamptz(6) 
  professionals    Professionals     @relation(fields: [professionalId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  specialSchedules SpecialSchedules?

  @@index([professionalId])
  @@map("special_days")
}

model SpecialSchedules {
  id            Int         @id @default(autoincrement()) 
  specialDayId  Int         @unique 
  scheduleStart DateTime    @db.Timestamptz(6) 
  scheduleEnd   DateTime    @db.Timestamptz(6) 
  restStart     DateTime    @db.Timestamptz(6) 
  restEnd       DateTime    @db.Timestamptz(6) 
  specialDays   SpecialDays @relation(fields: [specialDayId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("special_schedules")
}

model Specialties {
  id                      Int                       @id @default(autoincrement()) 
  name                    String 
  professionalSpecialties ProfessionalSpecialties[]

  @@map("specialties")
}

model Studies {
  id             Int           @id @default(autoincrement()) 
  professionalId String 
  title          String 
  professionals  Professionals @relation(fields: [professionalId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([professionalId])
  @@map("studies")
}

model Users {
  id              String               @id @default(uuid()) 
  email           String?            
  imageURL        String? 
  name            String 
  lastName        String 
  rut             String?            @unique
  birthDate       DateTime?          @db.Timestamptz(6) 
  appointments    Appointments[]
  phoneNumbers    PhoneNumbers[]
  professionals   Professionals?
  whatsAppNumbers WhatsAppNumbers[]
  auth            Auth @relation(fields: [authId], references: [id], onDelete: Cascade)
  authId          String @unique

  @@map("users")
}

model Auth {
  id             String  @id @default(uuid())
  password       String
  user           Users?

  @@map("auth")
}

model WhatsAppNumbers {
  id           Int    @id @default(autoincrement()) 
  userId       String 
  number       String 
  roleOfNumber Role   @default(USER)
  users        Users  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId])
  @@map("whatsapp_numbers")
}

enum Role {
  USER
  PROFESSIONAL
}